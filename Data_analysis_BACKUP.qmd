---
title: "Preliminary investigation of the carbamylation profile in proteins excreted in 24-hour urine after injection of Bothrops jararaca venom in a murine model"
author: "Pedro Galdiano de Castro"
execute:
  echo: true
  warning: false
  message: false
format: html
code-fold: true
editor_options: 
  chunk_output_type: console
---

## ABSTRACT

Envenomation by _Bothrops jararaca_ is considered a neglected disease by the World Health Organization that causes high morbidity and mortality. Among the main causes of mortality due to _Bothrops_ envenomation is acute renal failure. Investigations of the proteome by mass spectrometry in plasma or renal tissue samples in murine models suggest potential candidates for markers of acute renal injury, such as the proteins NGAL and ITIH4. A less explored approach to search for markers of renal injury is the investigation of post translation modifications of proteins excreted in the urine of envenomed individuals. Elevated plasma urea levels are a striking feature among the changes commonly detected in blood samples from individuals who have been victims of snakebite. Uremia can be a sign of deterioration of renal function and can be associated with carbamylation of the amino terminus of proteins and the side chain of Lys residues. Carbamylation is a hallmark of aging that can be detected in the proteome, but it is underestimated as a hallmark of diseases that evolve with elevated urea. The present project aims to investigate the carbamylation profile of proteins excreted in 24-hour urine of animals injected with _B. jararaca_ venom. The _in vivo_ experiment with Swiss mice was conducted at the Laboratory of Applied Toxinology of Butantan Institute and the present project proposes the evaluation of urine samples from animals injected with 1.6 mg/kg of _B. jararaca_ venom, pretreated with cathepsin or meprin inhibitors. The samples were reduced with 5 mM TCEP, alkylated with 20 mM chloroacetamide and digested with trypsin (1:100) using the SP3 protocol (Single-Pot, Solid-Phase-enhanced Sample Preparation). The samples were analyzed in the Vanquish Neo – Obritrap Exploris 480 system in data-independent acquisition (DIA) mode. Peptide identifications and protein inference were performed using the DIA-NN v2.1.0 search engine with the _Mus musculus_ reference database containing only canonical sequences. Statistical analyses were performed using R version 4.2.2 with scripts developed specifically for the project.

Required R packages:

```{r}
library(diann) # to extract the MaxLFQ matrix from DIANN report
library(arrow) # to read the report.parquet file
library(here) # to avoid the need for use the path while loading the data
library(tidyverse) # to do the data wrangling, plots, etc...
library(janitor) # to clean the column names
library(ggpointdensity) # to reconstruct the m/z density map
library(naniar) # for sparsity analysis
library(factoextra) # to plot the PCA
library(patchwork) # to combine plots
library(lsa) # to calculate the cosine similarity
library(ggvenn) # to plot the Venn diagram
library(paletteer) # to use the nice color palette
library(ggtext) # to provide Markdown and HTML formatting in ggplot2
library(ggrepel) # to avoid the overlapping of the labels in the plots
library(kableExtra) # to format the tables
library(limma)  # to calculate the differential abundance
library(DIAgui) # to extract iBAQ values

# adjust the general theme for the plots
theme_update(
    text = element_text(color = "black", size = 20),
    axis.text = element_text(color = "black"),
    axis.title = element_text(color = "black", face = "bold"),
    strip.background = element_blank(),
    strip.text = element_text(face = "bold"),
    legend.title = element_text(face = "bold", hjust = 0.5),
    legend.title.position = "top"
)
```

# Load the helper functions to be used in the analysis

```{r}
# function to extract the coefficients of variation from the data
cv_mtx <- function(data, condition) {
  data %>%
    as.data.frame() %>%
    dplyr::select(protein, 
                  str_subset(colnames(data), condition)
                  ) %>%
    rowwise() %>%
    dplyr::mutate(across(where(is.numeric), ~ 2^(.) - 1),
                  cv = sd(c_across(where(is.numeric)), na.rm = TRUE) / mean(c_across(where(is.numeric)), na.rm = TRUE) * 100,
                  condition = condition) %>% 
    dplyr::select(protein, cv, condition)
}

# This function will create a column to store the percentage of missing values for each protein
protein_missingness <- function(x) {
    missingness_prop <- function(x) {
        sum(is.na(x)) / length(x) # calculate the percentage of missing values
    }
    x <- as.data.frame(x) %>% # convert the matrix to a dataframe
    dplyr::mutate(prot_miss = apply(x, 1, missingness_prop)) # apply the missingness_prop function to each row
}

# This function works to remove the proteins with more than a specific percentage of missing values
remove_missing <- function(x, threshold) {
    x <- as.data.frame(x) %>% # convert the matrix to a dataframe (just to make sure you are working with a dataframe)
    dplyr::filter(prot_miss <= threshold) %>% # filter the proteins with less than or equal to the threshold
    dplyr::select(-prot_miss) %>% # remove the prot_miss column
    as.matrix() # convert the dataframe back to a matrix
}
```

# Import and filter the report.parquet file from DIA-NN v2.1.0 search
We filter the data using Lib.PG.Q.Value ≤ 0.01, Lib.Q.Value ≤ 0.01, and PG.Q.Value ≤ 0.01 for the analysis.

```{r}
diann_report <- arrow::read_parquet("report.parquet") %>%
    dplyr::filter(Lib.PG.Q.Value <= 0.01 & Lib.Q.Value <= 0.01 & PG.Q.Value <= 0.01) %>%
    dplyr::mutate(
      Run = case_when(
      Run == "P1_02" ~ "Venom_r1",
      Run == "P1_03" ~ "Venom_r2",
      Run == "P1_04" ~ "Actinonin_30mg_r1",
      Run == "P1_05" ~ "Actinonin_30mg_r2",
      Run == "P1_07" ~ "Ven_Actn_30mg_r1",
      Run == "P1_08" ~ "Ven_Actn_30mg_r2",
      Run == "P1_09" ~ "Ven_Actn_30mg_r3",
      Run == "P1_10" ~ "JPMOEt_100mg_r1",
      Run == "P1_11" ~ "JPMOEt_100mg_r2",
      Run == "P1_12" ~ "JPMOEt_100mg_r3",
      Run == "P1_13" ~ "Ven_jPMOEt_100mg_r1",
      Run == "P1_14" ~ "Ven_jPMOEt_100mg_r2",
      Run == "P1_15" ~ "Ven_jPMOEt_100mg_r3",
      Run == "P2_01" ~ "NaCl_r1",
      Run == "P2_02" ~ "NaCl_r2",
      Run == "P2_03" ~ "NaCl_r3",
      Run == "P2_04" ~ "Actinonin_15mg_r1",
      Run == "P2_05" ~ "Actinonin_15mg_r2",
      Run == "P2_06" ~ "Actinonin_15mg_r3",
      Run == "P2_07" ~ "Ven_Actn_15mg_r1",
      Run == "P2_08" ~ "Ven_Actn_15mg_r2",
      Run == "P2_09" ~ "Ven_Actn_15mg_r3",
      Run == "P2_11" ~ "JPMOEt_50mg_r1",
      Run == "P2_12" ~ "JPMOEt_50mg_r2",
      Run == "P2_13" ~ "Ven_jPMOEt_50mg_r1",
      Run == "P2_14" ~ "Ven_jPMOEt_50mg_r2",
      Run == "P2_15" ~ "Ven_jPMOEt_50mg_r3"),
    Run = factor(Run, levels = c(
      "NaCl_r1", "NaCl_r2", "NaCl_r3", "Actinonin_15mg_r1", "Actinonin_15mg_r2", "Actinonin_15mg_r3",
      "Actinonin_30mg_r1", "Actinonin_30mg_r2", "JPMOEt_50mg_r1", "JPMOEt_50mg_r2",
      "JPMOEt_100mg_r1", "JPMOEt_100mg_r2", "JPMOEt_100mg_r3",
      "Venom_r1", "Venom_r2",
      "Ven_Actn_15mg_r1", "Ven_Actn_15mg_r2", "Ven_Actn_15mg_r3",
      "Ven_Actn_30mg_r1", "Ven_Actn_30mg_r2", "Ven_Actn_30mg_r3",
      "Ven_jPMOEt_50mg_r1", "Ven_jPMOEt_50mg_r2", "Ven_jPMOEt_50mg_r3",
      "Ven_jPMOEt_100mg_r1", "Ven_jPMOEt_100mg_r2", "Ven_jPMOEt_100mg_r3")
    ),
    condition = str_remove(Run, "_r1|_r2|_r3"),
        File.Name = Run,
        peptide_length = nchar(Stripped.Sequence)
    ) %>% 
  dplyr::filter(str_detect(Protein.Names, "MOUSE", negate = FALSE))

# extracting the matrix of abundance from DIA-NN report.parquet file
unique_genes <- diann::diann_matrix(diann_report,
    id.header = "Protein.Group",
    quantity.header = "Genes.MaxLFQ.Unique",
    proteotypic.only = T,
    pg.q = .01)

# QuantUMS score filtered mtx
quantums_mtx <- diann_report %>%
  dplyr::filter(PG.MaxLFQ.Quality > 0.75 & Empirical.Quality > 0.75) %>% 
    diann::diann_matrix(.,
    id.header = "Protein.Group",
    quantity.header = "Genes.MaxLFQ.Unique",
    proteotypic.only = T,
    pg.q = .01)

# count the number of proteins per sample and save it in a new data frame called proteins
proteins <- diann_report %>%
    dplyr::group_by(Run, condition) %>%
    dplyr::summarise(
        n_proteins = n_distinct(Protein.Ids)
    )
```

# Reconstruction of the ion chromatograms, the precursor quantity is plotted over the retention time (min) for each sample.

```{r}
precursor_rt <- diann_report %>%
  dplyr::mutate(Run = str_replace(Run, "Ven_Actn", "Ven + Actn"),
                Run = str_replace(Run, "Ven_jPMOEt", "Ven + jPMOEt"),
                Run = str_replace(Run, "_", " "),
                Run = str_replace(Run, "mg", " mg"),
                Run = str_replace(Run, "Actinonin", "Actn"),
                Run = str_replace(Run, "JPMOEt", "JPM-OEt"),
                Run = str_replace(Run, "jPMOEt", "JPM-OEt"),
                Run = str_replace(Run, "_r", " r"),
                Run = str_replace(Run, "OEt_", "OEt "),
                Run = str_replace(Run, "Actn_", "Actn "),
  ) %>% 
    ggplot(aes(x = RT, y = Precursor.Quantity)) +
      geom_rect(aes(xmin = 14, xmax = 15.3, ymin = -Inf, ymax = Inf),
              fill = "grey80", alpha = 0.1) +
      geom_rect(aes(xmin = 40, xmax = 42, ymin = -Inf, ymax = Inf),
              fill = "grey80", alpha = 0.1) +
      geom_rect(aes(xmin = 50.5, xmax = 51.5, ymin = -Inf, ymax = Inf),
              fill = "grey80", alpha = 0.1) +
    geom_line(aes(color = condition), show.legend = FALSE) +
  scale_color_manual(values = c("#FED789FF", "#023743FF", "#72874EFF", "#476F84FF", "#A4BED5FF", "#453947FF", "#66C2A5", "#FC8D62", "#FFD92F", "#8DA0CB")) +
    labs(x = "Retention time (min)",
        y = "Precursor quantity",
        color = NULL) +
  facet_wrap(~Run, ncol = 6, scales = "free") +
  theme(strip.background = element_blank(),
        panel.border = element_rect(color = "black", fill = NA),
        panel.background = element_blank()
        )
```

# For the m/z map, the density of ions collected is plotted over the scan range (m/z) for each sample.

```{r}
mz_map_density_plot <- diann_report %>%
    dplyr::mutate(Run = str_replace(Run, "Ven_Actn", "Ven + Actn"),
                Run = str_replace(Run, "Ven_jPMOEt", "Ven + jPMOEt"),
                Run = str_replace(Run, "_", " "),
                Run = str_replace(Run, "mg", " mg"),
                Run = str_replace(Run, "Actinonin", "Actn"),
                Run = str_replace(Run, "JPMOEt", "JPM-OEt"),
                Run = str_replace(Run, "jPMOEt", "JPM-OEt"),
                Run = str_replace(Run, "_r", " r"),
                Run = str_replace(Run, "OEt_", "OEt "),
                Run = str_replace(Run, "Actn_", "Actn "),
  ) %>% 
    ggplot(aes(x = RT, y = Precursor.Mz)) +
    ggpointdensity::geom_pointdensity(size = 0.25) +
    viridis::scale_color_viridis(option = "H") +
    scale_x_continuous(limits = c(0, 90)) +
    labs(x = "Retention time (min)",
        y = " Scan range (m/z)",
        color = NULL) +
  facet_wrap(~Run, scales = "free", ncol = 6) +
  theme(strip.background = element_blank(),
        legend.position = "bottom",
        legend.key.width = unit(1.5, "cm"),
        legend.key.height = unit(0.25, "cm"),
        panel.border = element_rect(color = "black", fill = NA),
        panel.background = element_blank()
    )
```

# Counting the number of peptides per sample

```{r}
peptides_plot <- diann_report %>%
    dplyr::mutate(Run = str_replace(Run, "Ven_Actn", "Ven + Actn"),
                Run = str_replace(Run, "Ven_jPMOEt", "Ven + JPM-OEt"),
                Run = str_replace(Run, "_", " "),
                Run = str_replace(Run, "mg", " mg"),
                Run = str_replace(Run, "Actinonin", "Actn"),
                Run = str_replace(Run, "JPMOEt", "JPM-OEt"),
                Run = str_replace(Run, "jPMOEt", "JPM-OEt"),
                Run = str_replace(Run, "_r", " r"),
                Run = str_replace(Run, "OEt_", "OEt "),
                Run = str_replace(Run, "Actn_", "Actn "),
  ) %>% 
    dplyr::group_by(Run, condition) %>%
    dplyr::summarise(
        n_peptides = n_distinct(Stripped.Sequence)
    ) %>%
    ggplot(aes(y = Run, 
               x = n_peptides,
               fill = condition)) +
    geom_bar(stat = "identity",
             position = "dodge",
             show.legend = FALSE) +
  scale_fill_manual(values = c("#FED789FF", "#023743FF", "#72874EFF", "#476F84FF", "#A4BED5FF", "#453947FF", "#66C2A5", "#FC8D62", "#FFD92F", "#8DA0CB")) +
    geom_text(aes(label = n_peptides, hjust = ifelse(n_peptides > 8117, 1.1, -0.15)),
        color = "black",
        size = 7, nudge_x = -0.5) +
    labs(y = NULL,
        x = "Number of peptides",
        fill = NULL) +
    theme(text = element_text(size = 25),
      axis.text.x = element_text(
        angle = 90, vjust = 0.5, hjust = 1),
      panel.border = element_rect(color = "black", fill = NA),
      panel.background = element_blank()
      )
```

# Counting the number of proteins per sample

```{r}
proteins_plot <- proteins %>%
    dplyr::mutate(Run = str_replace(Run, "Ven_Actn", "Ven + Actn"),
                Run = str_replace(Run, "Ven_jPMOEt", "Ven + jPMOEt"),
                Run = str_replace(Run, "_", " "),
                Run = str_replace(Run, "mg", " mg"),
                Run = str_replace(Run, "Actinonin", "Actn"),
                Run = str_replace(Run, "JPMOEt", "JPM-OEt"),
                Run = str_replace(Run, "jPMOEt", "JPM-OEt"),
                Run = str_replace(Run, "_r", " r"),
                Run = str_replace(Run, "OEt_", "OEt "),
                Run = str_replace(Run, "Actn_", "Actn "),
  ) %>% 
    ggplot(aes(y = Run, x = n_proteins, fill = condition)) +
    geom_bar(stat = "identity", position = "dodge", show.legend = FALSE) +
  scale_fill_manual(values = c("#FED789FF", "#023743FF", "#72874EFF", "#476F84FF", "#A4BED5FF", "#453947FF", "#66C2A5", "#FC8D62", "#FFD92F", "#8DA0CB")) +
    geom_text(aes(label = n_proteins, hjust = ifelse(n_proteins > 1882, 1.1, -0.1)),
        color = "black",
        size = 7, nudge_x = -0.5) +
    labs(y = NULL,
        x = "Number of proteins",
        fill = NULL) +
    theme(text = element_text(size = 25),
      axis.text.x = element_text(
        angle = 90, vjust = 0.5, hjust = 1),
      panel.border = element_rect(color = "black", fill = NA),
      panel.background = element_blank()
      )
```

# evaluate the sparsity pattern for each sample

```{r}
sparsity_plot <- unique_genes %>%
  as.data.frame() %>%
  rename_with(~ str_replace(., "Ven_Actn", "Ven + Actn"), everything()) %>%
  rename_with(~ str_replace(., "Ven_jPMOEt", "Ven + JPM-OEt"), everything()) %>%
  rename_with(~ str_replace(., "_", " "), everything()) %>%
  rename_with(~ str_replace(., "mg", " mg"), everything()) %>%
  rename_with(~ str_replace(., "Actinonin", "Actn"), everything()) %>%
  rename_with(~ str_replace(., "JPMOEt", "JPM-OEt"), everything()) %>%
  rename_with(~ str_replace(., "_r", " r"), everything()) %>%
    naniar::vis_miss() +
    labs(x = NULL,
         y = "Number of proteins") +
    theme(text = element_text(size = 20),
        axis.text.y = element_text(color = "black", vjust = 1),
        axis.text.x = element_text(
            angle = 90, color = "black"),
        line = element_blank(),
        panel.background = element_blank()
    )

quantums_mtx_sparsity_plot <- quantums_mtx %>%
  as.data.frame() %>%
  rename_with(~ str_replace(., "Ven_Actn", "Ven + Actn"), everything()) %>%
  rename_with(~ str_replace(., "Ven_jPMOEt", "Ven + JPM-OEt"), everything()) %>%
  rename_with(~ str_replace(., "_", " "), everything()) %>%
  rename_with(~ str_replace(., "mg", " mg"), everything()) %>%
  rename_with(~ str_replace(., "Actinonin", "Actn"), everything()) %>%
  rename_with(~ str_replace(., "JPMOEt", "JPM-OEt"), everything()) %>%
  rename_with(~ str_replace(., "_r", " r"), everything()) %>%
    naniar::vis_miss() +
    labs(x = NULL,
         y = "Number of proteins") +
    theme(text = element_text(size = 20),
        axis.text.y = element_text(color = "black", vjust = 1),
        axis.text.x = element_text(
            angle = 90, color = "black"),
        line = element_blank(),
        panel.background = element_blank()
    )

abundance_mtx_reduced <- protein_missingness(quantums_mtx[, -1]) %>% 
    remove_missing(threshold = 0.3)

quantums_mtx_sparsity_reduced_plot <- abundance_mtx_reduced %>% 
    as.data.frame() %>%
  rename_with(~ str_replace(., "Ven_Actn", "Ven + Actn"), everything()) %>%
  rename_with(~ str_replace(., "Ven_jPMOEt", "Ven + JPM-OEt"), everything()) %>%
  rename_with(~ str_replace(., "_", " "), everything()) %>%
  rename_with(~ str_replace(., "mg", " mg"), everything()) %>%
  rename_with(~ str_replace(., "Actinonin", "Actn"), everything()) %>%
  rename_with(~ str_replace(., "JPMOEt", "JPM-OEt"), everything()) %>%
  rename_with(~ str_replace(., "_r", " r"), everything()) %>%
    naniar::vis_miss() +
    labs(x = NULL,
         y = "Number of proteins") +
    theme(text = element_text(size = 20),
        axis.text.y = element_text(color = "black", vjust = 1),
        axis.text.x = element_text(
            angle = 90, color = "black"),
        line = element_blank(),
        panel.background = element_blank()
    )
```

# Imputation using random forest

```{r}
df_for_imputation <- log2(abundance_mtx_reduced + 1) %>% 
  as.data.frame() %>%
  rownames_to_column(var = "protein")

cat("Percentage of missing values:", 
    mean(is.na(df_for_imputation)) * 100, "%\n")

imputed_data <- mice::mice(df_for_imputation,
                    meth = "rf", m = 3, maxit = 100, seed = 500)

# write_rds(imputed_data, "Rdata/imputed_data.rds")
# 
# png("plots/densityplot.png", width = 1200, height = 800)
# mice::densityplot(imputed_data,
#             plot.points = TRUE)
# dev.off()

complete_mtx <- mice::complete(imputed_data, 1)
```

# calculate the cosine similarity in the matrix and plot the heatmap

```{r}
cosine_similarity <- complete_mtx %>%
  column_to_rownames("protein") %>% 
    as.data.frame() %>%
  rename_with(~ str_replace(., "Ven_Actn", "Ven + Actn"), everything()) %>%
  rename_with(~ str_replace(., "Ven_jPMOEt", "Ven + JPM-OEt"), everything()) %>%
  rename_with(~ str_replace(., "_", " "), everything()) %>%
  rename_with(~ str_replace(., "mg", " mg"), everything()) %>%
  rename_with(~ str_replace(., "Actinonin", "Actn"), everything()) %>%
  rename_with(~ str_replace(., "JPMOEt", "JPM-OEt"), everything()) %>%
  rename_with(~ str_replace(., "_r", " r"), everything()) %>%
  as.matrix() %>% 
    na.omit() %>%
    lsa::cosine() %>%
    as.data.frame() %>%
    rownames_to_column(var = "Sample") %>%
    pivot_longer(-Sample, names_to = "Match", values_to = "value") %>%
    dplyr::mutate(Similarity = "Cosine similarity",
                  Sample = factor(Sample, levels = c("NaCl r1", "NaCl r2", "NaCl r3", 
                                                     "Actn 15 mg r1", "Actn 15 mg r2", "Actn 15 mg r3",
      "Actn 30 mg r1", "Actn 30 mg r2", "JPM-OEt 50 mg r1", "JPM-OEt 50 mg r2",
      "JPM-OEt 100 mg r1", "JPM-OEt 100 mg r2", "JPM-OEt 100 mg r3",
      "Venom r1", "Venom r2",
      "Ven + Actn 15 mg r1", "Ven + Actn 15 mg r2", "Ven + Actn 15 mg r3",
      "Ven + Actn 30 mg r1", "Ven + Actn 30 mg r2", "Ven + Actn 30 mg r3",
      "Ven + JPM-OEt 50 mg r1", "Ven + JPM-OEt 50 mg r2", "Ven + JPM-OEt 50 mg r3",
      "Ven + JPM-OEt 100 mg r1", "Ven + JPM-OEt 100 mg r2", "Ven + JPM-OEt 100 mg r3")),
                  Match = factor(Match, levels = c("NaCl r1", "NaCl r2", "NaCl r3", "Actn 15 mg r1", "Actn 15 mg r2", "Actn 15 mg r3",
      "Actn 30 mg r1", "Actn 30 mg r2", "JPM-OEt 50 mg r1", "JPM-OEt 50 mg r2",
      "JPM-OEt 100 mg r1", "JPM-OEt 100 mg r2", "JPM-OEt 100 mg r3",
      "Venom r1", "Venom r2",
      "Ven + Actn 15 mg r1", "Ven + Actn 15 mg r2", "Ven + Actn 15 mg r3",
      "Ven + Actn 30 mg r1", "Ven + Actn 30 mg r2", "Ven + Actn 30 mg r3",
      "Ven + JPM-OEt 50 mg r1", "Ven + JPM-OEt 50 mg r2", "Ven + JPM-OEt 50 mg r3",
      "Ven + JPM-OEt 100 mg r1", "Ven + JPM-OEt 100 mg r2", "Ven + JPM-OEt 100 mg r3"))) %>%
    ggplot() +
    geom_tile(aes(x = Sample, y = Match, fill = value)) +
    viridis::scale_fill_viridis(option = "E") +
      labs(title = "Similarity matrix",
        x = NULL,
        y = NULL,
        fill = "Cosine similarity") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"),
          text = element_text(size = 20),
          axis.text.x = element_text(angle = 90,
            hjust = 1, vjust = 0.5, color = "black"),
          axis.text.y = element_text(angle = 0,
            hjust = 1, vjust = 0.5, color = "black"),
          legend.position = "bottom",
        legend.title.position = "top",
        legend.title = element_text(hjust = 0.5),
          legend.key.width = unit(2.5, "cm"),
          legend.key.height = unit(0.3, "cm"),
          panel.border = element_rect(color = "black", fill = NA)
    )
```

# K-means method to cluster the PCA plot

```{r}
pca_object <- complete_mtx %>%
  column_to_rownames("protein") %>% 
      as.data.frame() %>%
  as.matrix() %>% 
    na.omit() %>%
    t() %>%
    prcomp(center = TRUE, scale = TRUE)

summary(pca_object)
head(pca_object$x)

pca_df <- as.data.frame(pca_object$x[, 1:2])

kmeans_clusters <- fviz_nbclust(pca_df,
    FUNcluster = kmeans,
    method = "wss") +
    geom_point(size = 4, color = "steelblue") +
    geom_vline(xintercept = 4, linetype = "dashed") +
  theme_minimal() +
  labs(title = "Optimal number of clusters") +
    theme(plot.title = element_text(hjust = 0.5),
      text = element_text(color = "black", size = 20),
        title = element_text(color = "black", size = 20, face = "bold", hjust = 0.5),
        axis.text = element_text(color = "black"),
        axis.title = element_text(color = "black", face = "bold"),
      axis.ticks = element_line(color = "black"),
      panel.border = element_rect(color = "black", fill = NA)
      )

set.seed(123)
kmeans_pca <- kmeans(pca_df, centers = 4)

pca_plot <- fviz_pca_ind(pca_object,
                         geom = c("point", "text"),
                         habillage = kmeans_pca$cluster,
                         labelsize = 7, pointsize = 3,
                         palette = c("tomato", "steelblue", "forestgreen", "firebrick", "black"),
                         addEllipses = FALSE,
                         ggtheme = theme_classic(),
                         repel = TRUE) +
    labs(title = "PCA clustered by k-means") +
  theme_minimal() +
    theme(plot.title = element_text(hjust = 0.5),
          text = element_text(color = "black", size = 20),
          title = element_text(color = "black", size = 20,
                               face = "bold", hjust = 0.5),
        axis.text = element_text(color = "black"),
        axis.title = element_text(color = "black", face = "bold"),
        strip.background = element_rect(fill = "grey90"),
        strip.text = element_text(face = "bold"),
        legend.title = element_text(face = "bold", hjust = 0.5),
        legend.title.position = "top",
        legend.position = "none",
        panel.border = element_rect(color = "black", fill = NA)
        )
```

# plot the scores of quality of the QuantUMS
Information from DIA-NN documentation:
Empirical.Quality: when using QuantUMS reflects the agreement of relative precursor quantities obtained using different quantitative features (MS1 / fragment ions).
PG.MaxLFQ.Quality: when using QuantUMS reflects the quality of PG.MaxLFQ.

```{r}
low_scores_peptide <- diann_report %>% 
        dplyr::mutate(Run = str_replace(Run, "Ven_Actn", "Ven + Actn"),
                Run = str_replace(Run, "Ven_jPMOEt", "Ven + JPM-OEt"),
                Run = str_replace(Run, "_", " "),
                Run = str_replace(Run, "mg", " mg"),
                Run = str_replace(Run, "Actinonin", "Actn"),
                Run = str_replace(Run, "JPMOEt", "JPM-OEt"),
                Run = str_replace(Run, "jPMOEt", "JPM-OEt"),
                Run = str_replace(Run, "_r", " r"),
                Run = str_replace(Run, "OEt_", "OEt "),
                Run = str_replace(Run, "Actn_", "Actn "),
  ) %>% 
  dplyr::filter(PG.MaxLFQ.Quality < 0.75 & Empirical.Quality < 0.75) %>%
  group_by(Run, condition) %>%
  summarise(
    n = n_distinct(Stripped.Sequence)
  )

QuantUMS_evaluation <- diann_report %>%
      dplyr::mutate(Run = str_replace(Run, "Ven_Actn", "Ven + Actn"),
                Run = str_replace(Run, "Ven_jPMOEt", "Ven + JPM-OEt"),
                Run = str_replace(Run, "_", " "),
                Run = str_replace(Run, "mg", " mg"),
                Run = str_replace(Run, "Actinonin", "Actn"),
                Run = str_replace(Run, "JPMOEt", "JPM-OEt"),
                Run = str_replace(Run, "jPMOEt", "JPM-OEt"),
                Run = str_replace(Run, "_r", " r"),
                Run = str_replace(Run, "OEt_", "OEt "),
                Run = str_replace(Run, "Actn_", "Actn "),
  ) %>% 
    ggplot(aes(
        x = PG.MaxLFQ.Quality,
        y = Empirical.Quality)
    ) +
    geom_pointdensity(size = 0.25) +
    geom_vline(xintercept = 0.75, linetype = "dashed", color = "black") +
    geom_hline(yintercept = 0.75, linetype = "dashed", color = "black") +
    viridis::scale_color_viridis(option = "plasma") +
    geom_text(data = low_scores_peptide,
        aes(x = 0.25, y = 0.35, label = n),
        hjust = -0.1, vjust = 0.5, 
        size = 9, fontface = "bold", 
        color = "red", show.legend = FALSE) +
    labs(title = "QuantUMS scores for feature selection",
        x = "pgQ score",
        y = "eQ score",
        color = NULL) +
    facet_wrap(~Run, ncol = 6) +
    theme(plot.title = element_text(size = 30, 
                                    face = "bold", hjust = 0.5),
      strip.background = element_blank(),
      strip.text = element_text(face = "bold", size = 25),
      text = element_text(size = 25),
      axis.title = element_text(size = 30),
      axis.text.x = element_text(color = "black",
            angle = 90, vjust = 0.5, hjust = 1),
        legend.position = "none",
      panel.border = element_rect(color = "black", fill = NA),
      panel.background = element_rect(fill = "white")
      )
```

# Measuring the coefficient of variation (CV) for each protein in each condition

```{r}
# return the log values to the original
CV_NaCl <- cv_mtx(complete_mtx, "NaCl")
CV_iMeprin_15mg <- cv_mtx(complete_mtx, "Actinonin_15mg")
CV_iMeprin_30mg <- cv_mtx(complete_mtx, "Actinonin_30mg")
CV_iCathepsin_50mg <- cv_mtx(complete_mtx, "JPMOEt_50mg")
CV_iCathepsin_100mg <- cv_mtx(complete_mtx, "JPMOEt_100mg")
CV_Venom <- cv_mtx(complete_mtx, "Venom")
CV_Venom_iMeprin_15mg <- cv_mtx(complete_mtx, "Ven_Actn_15mg")
CV_Venom_iMeprin_30mg <- cv_mtx(complete_mtx, "Ven_Actn_30mg")
CV_Venom_iCathepsin_50mg <- cv_mtx(complete_mtx, "Ven_jPMOEt_50mg")
CV_Venom_iCathepsin_100mg <- cv_mtx(complete_mtx, "Ven_jPMOEt_100mg")

# combine the results using a full join
df_mat_cv <- bind_rows(CV_NaCl, CV_iMeprin_15mg, CV_iMeprin_30mg, 
                       CV_iCathepsin_50mg, CV_iCathepsin_100mg, CV_Venom, 
                       CV_Venom_iMeprin_15mg, CV_Venom_iMeprin_30mg, 
                       CV_Venom_iCathepsin_50mg, CV_Venom_iCathepsin_100mg) %>%
  dplyr::mutate(condition = str_replace(condition, "Ven_Actn", "Ven + Actn"),
                condition = str_replace(condition, "Ven_jPMOEt", "Ven + jPMOEt"),
                condition = str_replace(condition, "_", " "),
                condition = str_replace(condition, "mg", " mg"),
                condition = str_replace(condition, "Actn", "Actinonin"),
                condition = str_replace(condition, "jPMOEt", "JPMOEt"),
                condition = str_replace(condition, "JPMOEt", "JPM-OEt"),
                condition = factor(condition, 
                                   levels = c("NaCl", "Actinonin 15 mg", "Actinonin 30 mg", 
                                              "JPM-OEt 50 mg", "JPM-OEt 100 mg", "Venom",
                                              "Ven + Actinonin 15 mg", "Ven + Actinonin 30 mg",
                                              "Ven + JPM-OEt 50 mg", "Ven + JPM-OEt 100 mg"))
  )
```

# plot the coefficient of variation for each protein across conditions

```{r}
cv_plot <- df_mat_cv %>%
    ggplot(aes(y = condition, x = cv, fill = condition)) +
    geom_violin(linewidth = 0.2) +
    geom_boxplot(width = 0.2, fill = "white",
                 linewidth = 0.2, outlier.alpha = 0.5) +
    geom_vline(xintercept = 20, linetype = "dashed", color = "black") +
  scale_fill_manual(values = c("#FED789FF", "#023743FF", "#72874EFF", "#476F84FF", "#A4BED5FF", "#453947FF", "#66C2A5", "#FC8D62", "#FFD92F", "#8DA0CB")) +
    labs(
        y = NULL,
        x = "Coefficient of variation (%)",
        fill = NULL) +
  theme_linedraw() +
    theme(
        legend.position = "none",
        axis.title = element_text(size = 20, face = "bold"),
        axis.text = element_text(color = "black", size = 20, face = "bold"),
        axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
        axis.ticks = element_line(),
        line = element_blank(),
        strip.background = element_blank(),
        strip.text = element_text(size = 20, face = "bold", color = "black")
    )
```

limma analysis using different filtering criteria

```{r}
quantums_limma_mtx <- complete_mtx %>% 
  column_to_rownames("protein") %>% 
  normalizeBetweenArrays(method = "scale")

# Create a design matrix for limma using the colnames(unique_genes)
design_groups <- str_extract(colnames(quantums_limma_mtx), "NaCl|Actinonin_15mg|Actinonin_30mg|JPMOEt_50mg|JPMOEt_100mg|Venom|Ven_Actn_15mg|Ven_Actn_30mg|Ven_jPMOEt_50mg|Ven_jPMOEt_100mg") %>% 
  factor(levels = c("NaCl", "Actinonin_15mg", "Actinonin_30mg", "JPMOEt_50mg", "JPMOEt_100mg", "Venom", "Ven_Actn_15mg", "Ven_Actn_30mg", "Ven_jPMOEt_50mg", "Ven_jPMOEt_100mg"))
design <- model.matrix(~ 0 + design_groups)
colnames(design) <- str_remove(colnames(design), "design_groups")

# Create a contrast matrix to compare the conditions
contrast_matrix <- limma::makeContrasts(
  Actinonin_15mg_vs_NaCl = Actinonin_15mg - NaCl,
  Actinonin_30mg_vs_NaCl = Actinonin_30mg - NaCl,
  JPMOEt_50mg_vs_NaCl = JPMOEt_50mg - NaCl,
  JPMOEt_100mg_vs_NaCl = JPMOEt_100mg - NaCl,
  Venom_vs_NaCl = Venom - NaCl,
  Ven_Actn_15mg_vs_NaCl = Ven_Actn_15mg - NaCl,
  Ven_Actn_30mg_vs_NaCl = Ven_Actn_30mg - NaCl,
  Ven_jPMOEt_50mg_vs_NaCl = Ven_jPMOEt_50mg - NaCl,
  Ven_jPMOEt_100mg_vs_NaCl = Ven_jPMOEt_100mg - NaCl,
  Actinonin_15mg_vs_Actinonin_30mg = Actinonin_15mg - Actinonin_30mg,
  JPMOEt_50mg_vs_JPMOEt_100mg = JPMOEt_50mg - JPMOEt_100mg,
  Ven_Actn_15mg_vs_Venom = Ven_Actn_15mg - Venom,
  Ven_Actn_30mg_vs_Venom = Ven_Actn_30mg - Venom,
  Ven_jPMOEt_50mg_vs_Venom = Ven_jPMOEt_50mg - Venom,
  Ven_jPMOEt_100mg_vs_Venom = Ven_jPMOEt_100mg - Venom,
  levels = design
)

# Fit the linear model for the pgQ + eQ filtered matrix using robust regression
fit_quantums <- limma::lmFit(quantums_limma_mtx,
                    design,
                    method = "robust")

# Apply empirical Bayes moderation
contrast_fit_quantums <- limma::contrasts.fit(fit_quantums,
                                     contrast_matrix) %>%
  limma::eBayes()
```

# Get the results for each contrast using the QuantUMS filtered data

```{r}
results_Actinonin_15mg_vs_NaCl_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "Actinonin_15mg_vs_NaCl",
                               number = Inf,
                               adjust.method = "BH") %>% 
  rownames_to_column("proteins") %>% 
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "Actn 15mg vs NaCl"
  )

results_Actinonin_30mg_vs_NaCl_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "Actinonin_30mg_vs_NaCl",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "Actn 30mg vs NaCl"
  )

results_JPMOEt_50mg_vs_NaCl_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "JPMOEt_50mg_vs_NaCl",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "JPM-OEt 50mg vs NaCl"
  )

results_JPMOEt_100mg_vs_NaCl_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "JPMOEt_100mg_vs_NaCl",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "JPM-OEt 100mg vs NaCl"
  )

results_Venom_vs_NaCl_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "Venom_vs_NaCl",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "Venom vs NaCl"
  )

results_Ven_Actn_15mg_vs_NaCl_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "Ven_Actn_15mg_vs_NaCl",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "Venom + Actn 15mg vs NaCl"
  )

results_Ven_Actn_30mg_vs_NaCl_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "Ven_Actn_30mg_vs_NaCl",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "Venom + Actn 30mg vs NaCl"
  )

results_Ven_jPMOEt_50mg_vs_NaCl_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "Ven_jPMOEt_50mg_vs_NaCl",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "Venom + JPM-OEt 50mg vs NaCl"
  )

results_Ven_jPMOEt_100mg_vs_NaCl_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "Ven_jPMOEt_100mg_vs_NaCl",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "Venom + JPM-OEt 100mg vs NaCl"
  )

results_Actinonin_15mg_vs_Actinonin_30mg_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "Actinonin_15mg_vs_Actinonin_30mg",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "Actn 15mg vs Actn 30mg"
  )

results_JPMOEt_50mg_vs_JPMOEt_100mg_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "JPMOEt_50mg_vs_JPMOEt_100mg",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "JPM-OEt 50mg vs JPM-OEt 100mg"
  )

results_Ven_Actn_15mg_vs_Venom_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "Ven_Actn_15mg_vs_Venom",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "Venom + Actn 15mg vs Venom"
  )

results_Ven_Actn_30mg_vs_Venom_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "Ven_Actn_30mg_vs_Venom",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "Venom + Actn 30mg vs Venom"
  )

results_Ven_jPMOEt_50mg_vs_Venom_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "Ven_jPMOEt_50mg_vs_Venom",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "Venom + JPM-OEt 50mg vs Venom"
  )

results_Ven_jPMOEt_100mg_vs_Venom_QuantUMS <- limma::topTable(contrast_fit_quantums,
                               coef = "Ven_jPMOEt_100mg_vs_Venom",
                               number = Inf,
                               adjust.method = "BH") %>%
  rownames_to_column("proteins") %>%
  dplyr::mutate(status = case_when(
            logFC > 0.58 & adj.P.Val <= 0.05 ~ "Increased",
            logFC < -0.58 & adj.P.Val <= 0.05 ~ "Decreased",
            TRUE ~ "Not significant"),
            status = factor(status, levels = c("Decreased", "Not significant", "Increased")),
            condition = "Venom + JPM-OEt 100mg vs Venom"
  )

# combined limma results
combined_quantums_limma_results <- bind_rows(
  results_Actinonin_15mg_vs_NaCl_QuantUMS,
  results_Actinonin_30mg_vs_NaCl_QuantUMS,
  results_JPMOEt_50mg_vs_NaCl_QuantUMS,
  results_JPMOEt_100mg_vs_NaCl_QuantUMS,
  results_Venom_vs_NaCl_QuantUMS,
  results_Ven_Actn_15mg_vs_NaCl_QuantUMS,
  results_Ven_Actn_30mg_vs_NaCl_QuantUMS,
  results_Ven_jPMOEt_50mg_vs_NaCl_QuantUMS,
  results_Ven_jPMOEt_100mg_vs_NaCl_QuantUMS,
  results_Actinonin_15mg_vs_Actinonin_30mg_QuantUMS,
  results_JPMOEt_50mg_vs_JPMOEt_100mg_QuantUMS,
  results_Ven_Actn_15mg_vs_Venom_QuantUMS,
  results_Ven_Actn_30mg_vs_Venom_QuantUMS,
  results_Ven_jPMOEt_50mg_vs_Venom_QuantUMS,
  results_Ven_jPMOEt_100mg_vs_Venom_QuantUMS) %>% 
  dplyr::mutate(logFC = round(logFC, 2),
                AveExpr = round(AveExpr, 2),
                B = round(B, 2)) %>% 
  left_join(diann_report[, c("Protein.Group", "Genes")] %>% 
              distinct(), by = c("proteins" = "Protein.Group")
            ) %>%
  dplyr::rename(Protein = proteins,
                Gene = Genes,
                Comparison = condition)

# write the results to a file
write_tsv(combined_quantums_limma_results, "combined_quantums_limma_results.tsv")
```

# Plot the results

```{r}
# count the number of proteins in each status
signif_proteins <- combined_quantums_limma_results %>%
  dplyr::filter(status != "Not significant") %>%
  group_by(status, Comparison) %>%
  dplyr::summarise(proteins = n())

combined_quantums_limma_results %>%
  dplyr::filter(status != "Not significant") %>%
  write_tsv("significant_proteins.tsv")

id_mapping <- read_tsv("idmapping_2025_05_11.tsv") %>% 
  rename("proteins" = "From") %>% 
  dplyr::mutate(`Gene Names` = str_remove(`Gene Names`, " .*"))

annotation_for_protein <- c("Il1rap", "Lcn2", "Slc47a1", "Chia", 
                            "Mup17", "Mup3", "Umod", "Mup20", "Xpnpep2", 
                            "Nectin4", "Esam", "Alb", "Asah1", "Smpd1", 
                            "Smpdl3a", "Apoe", "Apoa1", "Apoa2", "B2m", "Vcam1",
                            "Blvrb", "Orm2", "Orm1", "Mup4", "Obp1a", "Serpina6",
                            "C8g", "Ngp", "Cd36", "Hba", "Hbb-b1", "Hbb-b2",
                            "Chil3", "Apcs", "Hp","Mug1", "Serpina1b", "Serpina3k",
                            "Bcam", "Cdh1", "Cdh11", "Ceacam1", "Cd248",
                            "Cfi", "Fgg", "Fga", "Fgb", "Kng1", "Lum", "Retnla", "Cd200",
                            "Cd44", "Cd48", "Cd36", "Cltrn", "Cp", "Cspg4",
                            "Cst3", "Ctsd", "Ctse", "Ctso", "Dag1", "Dsc1")

# Bland-Altman / Tukey Mean-Difference plot (MD plot) with Generalized Additive Model smooth line
MD_plot <- ggplot(combined_quantums_limma_results,
                  aes(x = AveExpr,
                      y = logFC,
                      color = status)
                  ) +
  geom_point(alpha = 0.3) +
  geom_smooth(method = "gam", se = FALSE, color = "darkblue", linewidth = 1) +
  guides(color = guide_legend(override.aes = list(size = 5, alpha = 1)),
         shape = guide_legend(override.aes = list(size = 5, alpha = 1))) +
  geom_hline(yintercept = c(-0.58, 0.58), linetype = "dashed", color = "black") +
  scale_color_manual(values = c("Decreased" = "steelblue",
                                "Not significant" = "grey60",
                                "Increased" = "firebrick")) +
  facet_wrap(~Comparison, scales = "free", ncol = 5) +
    geom_text(data = signif_proteins %>% 
                dplyr::filter(status == "Decreased"),
            aes(x = 13.5, y = -3, label = paste0(proteins)),
            size = 8, fontface = "bold",
            hjust = 0.5,
            vjust = -1, 
            show.legend = FALSE) +
      geom_text(data = signif_proteins %>% 
                dplyr::filter(status == "Increased"),
            aes(x = 13.5, y = 1, label = paste0(proteins)),
            size = 8, fontface = "bold",
            hjust = 0.5,
            vjust = -1, 
            show.legend = FALSE) +
  geom_label_repel(data = combined_quantums_limma_results %>% 
                dplyr::filter(status != "Not significant" & Gene %in% annotation_for_protein),
            aes(label = paste0(Gene)),
            show.legend = FALSE) +
    labs(title = "Bland-Altman plots of limma analysis",
       x = "log<sub>2</sub>(Average protein abundance)",
       y = "log<sub>2</sub>FC") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"),
        text = element_text(size = 20),
        legend.position = "bottom",
        legend.title = element_blank(),
        legend.box = "vertical",
        strip.text = element_text(size = 15, face = "bold", color = "black"),
        axis.text = element_text(color = "black"),
        axis.title = element_markdown(size = 20, face = "bold"),
        axis.ticks = element_line(color = "black"),
        panel.border = element_rect(color = "black", 
                                    fill = NA)
        )

# boxplot of log2FC
boxplot_logFC <- combined_quantums_limma_results %>%
  ggplot(aes(y = Comparison,
             x = logFC,
             fill = Comparison)) +
  geom_boxplot(outlier.alpha = 0.4, linewidth = 0.25, fill = "#476F84FF") +
  geom_vline(xintercept = c(0), linetype = "dashed", color = "red") +
  labs(y = NULL,
       x = "log<sub>2</sub>FC") +
  theme_minimal() +
  theme(text = element_text(size = 20),
        legend.position = "none",
        strip.text = element_text(size = 20, face = "bold", color = "black"),
        axis.text = element_text(color = "black"),
        axis.title = element_markdown(size = 20, face = "bold"),
        axis.ticks = element_line(color = "black"),
        panel.border = element_rect(color = "black", fill=NA)
        )
```

# plot the distribution of urinary antigen proteins

```{r}
urinary_antigens_plot <- complete_mtx %>% 
  left_join(id_mapping, by = join_by("protein" == "proteins")) %>%
  dplyr::select(1:27,31) %>%
  dplyr::filter(`Gene Names` %in% c("Il1rap", "Lcn2", "Slc47a1", 
                            "Mup17", "Mup3", "Mup20",  "Nectin4", "Esam", "Alb", "Smpd1", 
                            "Apoe", "Apoa1", "Apoa2", "Vcam1",
                            "Blvrb", "Orm2", "Orm1", "Mup4", "Serpina6",
                            "C8g", "Cd36", "Hba", "Hbb-b1", "Hbb-b2",
                            "Chil3", "Apcs", "Hp","Mug1", "Serpina1b", "Serpina3k",
                            "Bcam", "Cdh1", "Cfi", "Fgg", "Fga", "Fgb", "Kng1", "Lum",
                            "Cd36", "Cp", "Cspg4", "Cst3", "Ctsd", "Ctse", "Ctso", "Dag1")) %>%
  pivot_longer(cols = -c(protein, `Gene Names`),
    names_to = "sample",
    values_to = "abundance") %>%
  dplyr::mutate(condition = str_remove(sample, "_r1|_r2|_r3"),
                condition = str_replace(condition, "Ven_Actn", "Ven + Actn"),
                condition = str_replace(condition, "Ven_jPMOEt", "Ven + jPMOEt"),
                condition = str_replace(condition, "_", " "),
                condition = str_replace(condition, "mg", " mg"),
                condition = str_replace(condition, "Actn", "Actinonin"),
                condition = str_replace(condition, "jPMOEt", "JPMOEt"),
                condition = str_replace(condition, "JPMOEt", "JPM-OEt"),
                condition = factor(condition, 
                                   levels = c("NaCl", "Actinonin 15 mg", "Actinonin 30 mg", 
                                              "JPM-OEt 50 mg", "JPM-OEt 100 mg", "Venom",
                                              "Ven + Actinonin 15 mg", "Ven + Actinonin 30 mg",
                                              "Ven + JPM-OEt 50 mg", "Ven + JPM-OEt 100 mg"))
  ) %>%
  ggplot(aes(x = condition, y = abundance, fill = condition)) +
  geom_boxplot(outlier.alpha = 0.4, linewidth = 0.25) +
  geom_jitter(aes(color = condition), alpha = 0.7, size = 0.5) +
  labs(x = NULL,
       y = "log<sub>2</sub>(Abundance)") +
  facet_wrap(~`Gene Names`, ncol = 5, scales = "free_y") +
  scale_fill_manual(values = c("#FED789FF", "#023743FF", "#72874EFF", "#476F84FF", "#A4BED5FF", "#453947FF", "#66C2A5", "#FC8D62", "#FFD92F", "#8DA0CB")) +
  theme_minimal() +
  theme(text = element_text(size = 20),
        legend.position = "none",
        strip.text = element_text(size = 20, face = "bold", color = "black"),
        axis.text = element_text(color = "black"),
        axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
        axis.title = element_markdown(size = 20, face = "bold"),
        axis.ticks = element_line(color = "black"),
        panel.border = element_rect(color = "black", fill=NA)
        )
```

# Saving the figures for the final report

Figure 1

```{r}
Figure_1 <- (precursor_rt / mz_map_density_plot) + 
  plot_annotation(tag_levels = "A") & 
  theme(plot.tag = element_text(size = 30, face = "bold"))

ggsave("Figure_1.png",
    path = "plots", Figure_1,
    width = 24, height = 20,
    units = "in", dpi = 300)
```

Figure 2

```{r}
Figure_2 <- (peptides_plot | proteins_plot) + 
  plot_annotation(tag_levels = "A") & 
  theme(plot.tag = element_text(size = 30, face = "bold"))

ggsave("Figure_2.png",
    path = "plots", Figure_2,
    width = 15, height = 12,
    units = "in", dpi = 300)
```

Figure 3

```{r}
Figure_3 <- (sparsity_plot | quantums_mtx_sparsity_plot | quantums_mtx_sparsity_reduced_plot) + 
  plot_annotation(tag_levels = "A") & 
  theme(plot.tag = element_text(size = 30, face = "bold"))

ggsave("Figure_3.png",
    path = "plots", Figure_3,
    width = 18, height = 10,
    units = "in", dpi = 300)
```

Figure 4

```{r}
ggsave("Figure_4.png",
    path = "plots", QuantUMS_evaluation,
    width = 28, height = 20,
    units = "in", dpi = 300)
```

Figure 5

```{r}
Figure_5 <- ((kmeans_clusters | pca_plot) / (cosine_similarity | cv_plot)) + 
  plot_annotation(tag_levels = "A") & 
  theme(plot.tag = element_text(size = 30, face = "bold"))

ggsave("Figure_5.png",
    path = "plots", Figure_5,
    width = 20, height = 20,
    units = "in", dpi = 300)
```

Figure 6

```{r}
ggsave("Figure_6.png",
    path = "plots", MD_plot,
    width = 25, height = 12,
    units = "in", dpi = 300,
    bg = "white")
```

Figure 7

```{r}
ggsave("Figure_7.png",
    path = "plots", urinary_antigens_plot,
    width = 20, height = 20,
    units = "in", dpi = 300, bg = "white")
```

