---
title: "Run_Analysis"
format: html
---

# Source everything :D
```{r}
source("./src/Source_Everything.R") # Load all functions
source("./LoadSamples.R") # Load samples and relations

diannReport <- Make_DiannReport(samplesDF, organism = "")
diannMatrix <- Make_DiannMatrix(diannReport, header = "Genes")


# Install_Packages(packages)
```

# Get all the strings for the .csv
```{r}
csvList <- list.files(
  c("./data/output/matrices/basic/", "./data/output/matrices/MICE/"),
  pattern = "*.csv$",
  full.names = TRUE,
  ignore.case = TRUE
)
```


# Quality Analysis
```{r}
# Iterate over the directory of the imputed .csv
for (dir in csvList) {
dir <- csvList[1]

  #read the .csv
  imputed <- as.matrix(tibble::column_to_rownames(
    read.csv(dir),
    var = "X"
  ))

  # clean up the graph name
  name <- stringr::str_to_title(
    stringr::str_replace_all(
      stringr::str_remove(basename(dir), ".csv$"),
      "_",
      " "
    )
  )

  # Cosine Similarity
  cosine <- Plot_Cosine(imputed, fancyLabels)

  # k-Means
  kmeans <- Plot_kMeans(imputed, numberOfClusters = 2)

  # PCA
  pca <- Plot_PCA(
    imputed,
    numberOfClusters = 2,
    clusterColors = clusterColor,
    labels = fancyLabels
  )

  # Coefficient of Variation
  #TODO: remove (Log2 + 1)
  CVs <- Plot_CV(
    imputed,# 2^(imputed - 1), #Todo: verificar com o Alison se estÃ¡ certo
    unique(diannReport$condition),
    fancyLabels,
    colors
  )

  # Aggregate all plots for better visualization
  combine <- patchwork::wrap_plots(
    list(cosine, kmeans, pca, CVs),
    cols = 4,
    nrow = 1
  ) +
    # Plot title and general formatting
    patchwork::plot_annotation(
      title = name,
      tag_levels = "A",
      theme = ggplot2::theme(
        plot.title = ggplot2::element_text(
          face = "bold",
          size = "35",
          hjust = 0.5,
          vjust = 0.5
        ),
      )
    )

  # Save the plot file
  ggplot2::ggsave(
    filename = paste0("quality_", stringr::str_replace_all(name, " ", "_"), ".png"),
    path = "./data/output/quality/",
    plot = combine,
    width = 80,
    height = 30,
    units = "cm",
    dpi = 300
  )

  rm(cosine, kmeans, pca, CVs, combine, name, dir)
  break
}
```


# Limma
```{r}

# Resize the margins for plot (bottom, left, top right)
par(mar = c(8, 4, 4, 2) + 0.1)

# Create a box plot
boxList <- list(boxplot(log2(diannMatrix + 1), main = "raw", las = 2, plot = FALSE))

log_diannMatrix <- log2(diannMatrix + 1)


#TODO: use pivot_longer before
# df <- as.data.frame(mat)
# df_long <- pivot_longer(df, cols = everything(), names_to = "Sample", values_to = "Value")

# ggplot(df_long, aes(x = Sample, y = Value)) +
#   geom_boxplot() +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))


ggplot2::ggplot(log_diannMatrix, ggplot2::aes(x = , y = )) + ggplot2::geom_boxplot()

# Resize the margins for plot (bottom, left, top right)
# par(mar = c(2, 4, 2, 4) + 0.1)

# # Create a Densisty plot
# densityPlot <- plot(density(log2(diannMatrix + 1), na.rm = TRUE), main = "udhisud")
# lines(density(imputed, na.rm = TRUE), col = "red", lty = 5)

for (csv in csvList) {
  csv <- csvList[1]
  imputed <- as.matrix(tibble::column_to_rownames(read.csv(csv), var = "X"))
  name <- stringr::str_to_title(stringr::str_remove(basename(csv), ".csv$"))
  
  imputed_box <- boxplot(imputed, main = stringr::str_replace_all(name, "_", " "), las = 2, plot = FALSE)
  boxList <- append(boxList, imputed_box)

    # Iterate over normalization methods using limma
    for (norm_method in c("scale", "cyclicloess")) {
      norm_method <- "scale"
      # Normalization function
      norm_Matrix <- limma::normalizeBetweenArrays(imputed, method = norm_method)
      norm_box <- boxplot(norm_Matrix, main = norm_method, las = 2, plot = FALSE)

      boxList <- append(boxList, norm_box)


      # fileName <- paste(name, norm_method, sep = "_")
      # dir <- paste0("./data/output/limma/norm", fileName)
      # write.csv(norm_box, dir)
  }
}

print(boxList)
  # Aggregate all plots for better visualization
  combine <- patchwork::wrap_plots(
    boxList,
    cols = 4,
    nrow = 1
  ) +
    # Plot title and general formatting
    patchwork::plot_annotation(
      title = stringr::str_replace_all(name, "_", " "),
      tag_levels = "A",
      theme = ggplot2::theme(
        plot.title = ggplot2::element_text(
          face = "bold",
          size = "35",
          hjust = 0.5,
          vjust = 0.5
        ),
      )
    )



  # Save the plot file
  ggplot2::ggsave(
    filename = paste0(fileName, ".png"),
    path = paste0(dir, "/images/"),
    plot = combine,
    width = 80,
    height = 30,
    units = "cm",
    dpi = 300
  )

  break


```    


```{r}  
    #   # Iterate over limma methods of analysis
    #   for (limma_method in c ("robust", "ls") {
    #     limma_method <- "robust"
    #     # Limma analysis function
    #     limma_contrast <- Make_Limma_Contrast(norm_Matrix,
    #      samplesToCompare, method = limma_method)


    #     limmaResult <- Compare_Limma_Results(limma_contrast, samplesToCompare)

    #     # Save limma result in a .tsv file
    #     fileName <- paste(name, norm_method, limma_method, sep = "_")
    #     write.table(
    #       limmaResult,
    #       file = paste0("./data/output/Limma/", fileName, ".tsv"),
    #       quote = FALSE,
    #       sep = '\t',
    #       col.names = NA
    #     )
    # }
  }
}

```

# Comparison before and after limma
```{r}
# Resize the margins for plot (bottom, left, top right)
par(mar = c(8, 4, 4, 2) + 0.1)

# Create a box plot
raw_box <- boxplot(log2(diannMatrix + 1), main = "raw", las = 2)
imputed_box <- boxplot(imputed, main = "imputed", las = 2)




# Resize the margins for plot (bottom, left, top right)
par(mar = c(2, 4, 2, 4) + 0.1)

# Create a Densisty plot
plot(density(log2(diannMatrix + 1), na.rm = TRUE), main = "udhisud")
lines(density(imputed, na.rm = TRUE), col = "red", lty = 5)

```

```{r}



limmaContrasts <- Make_Limma_Contrast(
  norm_Matrix,
  samplesToCompare,
  method = "robust"
)


limmaResult <- Compare_Limma_Results(limmaContrasts, samplesToCompare)

# #Save limma result in a .tsv file
write.table(
  limmaResult,
  file = "./data/output/allLimmaResultsCombined.tsv",
  quote = FALSE,
  sep = '\t',
  col.names = NA
)


number_significantProteins <- Count_SignificantProteins(limmaResult)
#Save limma result in a .tsv file
write.table(
  number_significantProteins,
  file = "./data/output/number_significantProteins.tsv",
  quote = FALSE,
  sep = '\t',
  col.names = NA
)

rm(limmaContrasts, number_significantProteins)
```



# Bland-Altman
```{r}
blandAltmanPlot <- Plot_BlandAltman(
  limmaResult,
  genesToHighLight_BlandAltman,
  labels = fancyLabels
)

ggplot2::ggsave(
  paste0("Bland_Altman", ".png"),
  path = "./data/output/",
  plot = blandAltmanPlot,
  width = 25,
  height = 12,
  units = "in",
  dpi = 300,
  bg = "white"
)


rm(blandAltmanPlot)
```


# Compare Proteins Abundance
```{r}
proteinComparisonPlot <- Compare_Abundance(
  imputed,
  genes = genesToCompare,
  colorList = colors,
  labels = fancyLabels,
  n_columns = 5
)


ggplot2::ggsave(
  paste0("Proteins_Comparison", ".png"),
  path = "./data/output/",
  plot = proteinComparisonPlot,
  width = 25,
  height = 8,
  units = "in",
  dpi = 300,
  bg = "white"
)

rm(proteinComparisonPlot)
```

