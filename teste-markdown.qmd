---
title: "Preliminary investigation of the carbamylation profile in proteins excreted in 24-hour urine after injection of Bothrops jararaca venom in a murine model"
author: "Pedro Galdiano de Castro"
execute:
  echo: false
  warning: false
  message: false
format: html
code-fold: true
editor_options:
  chunk_output_type: console
---

## ABSTRACT

Envenomation by *Bothrops jararaca* is considered a neglected disease by the World Health Organization that causes high morbidity and mortality. Among the main causes of mortality due to *Bothrops* envenomation is acute renal failure. Investigations of the proteome by mass spectrometry in plasma or renal tissue samples in murine models suggest potential candidates for markers of acute renal injury, such as the proteins NGAL and ITIH4. A less explored approach to search for markers of renal injury is the investigation of post translation modifications of proteins excreted in the urine of envenomed individuals. Elevated plasma urea levels are a striking feature among the changes commonly detected in blood samples from individuals who have been victims of snakebite. Uremia can be a sign of deterioration of renal function and can be associated with carbamylation of the amino terminus of proteins and the side chain of Lys residues. Carbamylation is a hallmark of aging that can be detected in the proteome, but it is underestimated as a hallmark of diseases that evolve with elevated urea. The present project aims to investigate the carbamylation profile of proteins excreted in 24-hour urine of animals injected with *B. jararaca* venom. The *in vivo* experiment with Swiss mice was conducted at the Laboratory of Applied Toxinology of Butantan Institute and the present project proposes the evaluation of urine samples from animals injected with 1.6 mg/kg of *B. jararaca* venom, pretreated with cathepsin or meprin inhibitors. The samples were reduced with 5 mM TCEP, alkylated with 20 mM chloroacetamide and digested with trypsin (1:100) using the SP3 protocol (Single-Pot, Solid-Phase-enhanced Sample Preparation). The samples were analyzed in the Vanquish Neo â€“ Obritrap Exploris 480 system in data-independent acquisition (DIA) mode. Peptide identifications and protein inference were performed using the DIA-NN v2.1.0 search engine with the *Mus musculus* reference database containing only canonical sequences. Statistical analyses were performed using R version 4.2.2 with scripts developed specifically for the project.


# Load packages dependencies
```{r}
#| label: Load packages
library(diann) # to extract the MaxLFQ matrix from DIANN report
library(arrow) # to read the report.parquet file
library(here) # to avoid the need for use the path while loading the data
library(tidyverse) # to do the data wrangling, plots, etc...
library(janitor) # to clean the column names
library(ggpointdensity) # to reconstruct the m/z density map
library(naniar) # for sparsity analysis
library(factoextra) # to plot the PCA
library(patchwork) # to combine plots
library(lsa) # to calculate the cosine similarity
library(ggvenn) # to plot the Venn diagram
library(paletteer) # to use the nice color palette
library(ggtext) # to provide Markdown and HTML formatting in ggplot2
library(ggrepel) # to avoid the overlapping of the labels in the plots
library(kableExtra) # to format the tables
library(limma)  # to calculate the differential abundance
library(DIAgui) # to extract iBAQ values
  
cat("\n\nAll packages were activated.\n")
```

# Global variables
```{r}

# This map should be ordered by the sample-name (code = sample_name), this will
# define the order everything will be ploted
labels <- c(
  P2_01 =  "NaCl r1",
  P2_02 = "NaCl r2",
  P2_03 =  "NaCl r3",
  P1_02 = "Venom r1",
  P1_03 =  "Venom r2",
  P2_04 = "Actn 15 mg r1",
  P2_05 =  "Actn 15 mg r2",
  P2_06 = "Actn 15 mg r3",
  P1_04 = "Actn 30 mg r1",
  P1_05 =  "Actn 30 mg r2",
  P2_11 = "JPM-OEt 50 mg r1",
  P2_12 =  "JPM-OEt 50 mg r2",
  P1_10 =  "JPM-OEt 100 mg r1",
  P1_11 = "JPM-OEt 100 mg r2",
  P1_12 =  "JPM-OEt 100 mg r3",
  P2_07 =  "Ven + Actn 15 mg r1",
  P2_08 = "Ven + Actn 15 mg r2",
  P2_09 =  "Ven + Actn 15 mg r3",
  P1_07 = "Ven + Actn 30 mg r1",
  P1_08 =  "Ven + Actn 30 mg r2",
  P1_09 = "Ven + Actn 30 mg r3",
  P2_13 = "Ven + JPM-OEt 50 mg r1",
  P2_14 =  "Ven + JPM-OEt 50 mg r2",
  P2_15 = "Ven + JPM-OEt 50 mg r3",
  P1_13 = "Ven + JPM-OEt 100 mg r1",
  P1_14 =  "Ven + JPM-OEt 100 mg r2",
  P1_15 = "Ven + JPM-OEt 100 mg r3"
)
                
# levels <- c(
#   "Actinonin_15mg_r1", "Actinonin_15mg_r2", "Actinonin_15mg_r3",
#   "Actinonin_30mg_r1", "Actinonin_30mg_r2", 
#   "JPMOEt_50mg_r1", "JPMOEt_50mg_r2",
#   "JPMOEt_100mg_r1", "JPMOEt_100mg_r2", "JPMOEt_100mg_r3",
#   "Venom_r1", "Venom_r2",
#   "Ven_Actn_15mg_r1", "Ven_Actn_15mg_r2", "Ven_Actn_15mg_r3",
#   "Ven_Actn_30mg_r1", "Ven_Actn_30mg_r2", "Ven_Actn_30mg_r3",
#   "Ven_jPMOEt_50mg_r1", "Ven_jPMOEt_50mg_r2", "Ven_jPMOEt_50mg_r3",
#   "Ven_jPMOEt_100mg_r1", "Ven_jPMOEt_100mg_r2", "Ven_jPMOEt_100mg_r3")


colors <- c("#FED789FF", "#023743FF", "#72874EFF", "#476F84FF", "#A4BED5FF"
            , "#453947FF", "#66C2A5", "#FC8D62", "#FFD92F", "#8DA0CB")

cat("\n\nGlobal variables were loaded.\n")
```

# Helper functions ----
```{r}
# Return a dataset with the coefficients of variation
CV_Matrix <- function(data, condition) {
  
  df <- as.data.frame(data)
  
  selected <- dplyr::select(df,
                            protein,
                            str_subset(colnames(data), condition))
  
  selected_rowwise <- rowwise(selected)
  
  mutated <- dplyr::mutate(selected_rowwise,
                           across(where(is.numeric),~2^(.) - 1),
                           cv = 100 * 
                             (
                               sd(c_across(where(is.numeric)),na.rm = TRUE) /
                                 mean(c_across(where(is.numeric)),na.rm = TRUE)
                             ),
                           condition = condition)
  
  cat("Coefficient of variation calculated for each protein (row)\n")
  
  return(dplyr::select(mutated, protein, cv, condition))
}

# This function works to remove the proteins with more 
# than a specific percentage of missing values
RemoveMissingAboveThreshold <- function(data, threshold) {
  df <- as.data.frame(data)
  
MeanOfMissing <- function(df) {
    return(mean(is.na(df)))
  }
  
  addedMissingness = dplyr::mutate(df,
                                   prot_miss = apply(df,1,MeanOfMissing)
  )
  
  cat("Proteins with missingness above", threshold, "were removed from dataset\n")
  
  return(dplyr::filter(addedMissingness, prot_miss > threshold))
}

# Generate the diannReport.rds from report.parquet file
DiannReport <- function(labels, directory = "../data/DIANN_results/") {
  
  # if(file.exists("diannReport.rds")) { 
  #   
  #   cat("\nDiannReport.rds were loaded.\n")
  #   return(read_rds("diannReport.rds"))
  # }
    #TODO: find a way to delete the file manually if needed
    #The variable "directory" does not exist if I just run this line
    #file.remove(paste(directory),diannReport.rds")) 
    
  
  report <- arrow::read_parquet(paste(directory, "report.parquet", sep=""))
  
  reportFiltered <- dplyr::filter(report,
                                  Lib.PG.Q.Value <= 0.01 
                                  & Lib.Q.Value <= 0.01 
                                  & PG.Q.Value <= 0.01)
  
  
  reportRecoded <- dplyr::mutate(reportFiltered,
                                Run = recode(Run, !!!labels),
                                Run = factor(Run, levels = unname(labels)),
                                condition = str_remove(Run, " r1| r2| r3"),
                                File.Name = Run,
                                peptide_length = nchar(Stripped.Sequence))
  
  diannReport <- dplyr::filter(reportRecoded,
                               str_detect(Protein.Names, "MOUSE"))
  
  # write_rds(diannReport, file = "diannReport.rds")
  cat("\ndiannReport.rds were created.\ndiannReport were loaded.\n")
  
  return(diannReport)
}

#TODO: I am not sure if this actually changes something...
# Adjust the general theme for the plots :
theme_update(
  text = element_text(color = "black", size = 20),
  axis.text = element_text(color = "black"),
  axis.title = element_text(color = "black", face = "bold"),
  strip.background = element_blank(),
  strip.text = element_text(face = "bold"),
  legend.title = element_text(face = "bold", hjust = 0.5),
  legend.title.position = "top"
)



cat("\n\nHelper functions were loaded.\n")

```

# Graph: Precursor x RT / Density Map ----
```{r}

diannReport <- DiannReport(labels)

# Reconstruction of the ion chromatograms, the precursor quantity is
#  plotted over the retention time (min) for each sample.
precursorRT <- diannReport %>%
  ggplot(aes(x = RT, y = Precursor.Quantity)) +
  geom_line(aes(color = condition), show.legend = FALSE) +
  scale_color_manual(values = colors) +
  labs(x = "Retention time (min)",
       y = "Precursor quantity",
       color = NULL) +
  facet_wrap(~Run, ncol = 6, scales = "free") +
  theme(strip.background = element_blank(),
        panel.border = element_rect(color = "black", fill = NA),
        panel.background = element_blank())

# For the m/z map, the density of ions collected is plotted over 
# the scan range (m/z) for each sample.
mzMapDensity <- diannReport %>% 
  ggplot(aes(x = RT, y = Precursor.Mz)) +
  ggpointdensity::geom_pointdensity(size = 0.25) +
  viridis::scale_color_viridis(option = "H") +
  scale_x_continuous(limits = c(0, 90)) +
  labs(x = "Retention time (min)",
       y = "Scan range (m/z)",
       color = NULL) +
  facet_wrap(~Run, scales = "free", ncol = 6) +
  theme(strip.background = element_blank(),
        legend.position = "bottom",
        legend.key.width = unit(1.5,"cm"),
        legend.key.height = unit(0.25, "cm"),
        panel.border = element_rect(color = "black", fill = NA),
        panel.background = element_blank())


precursorRT_and_mzMapDensity <- (precursorRT / mzMapDensity) +
  plot_annotation(tag_levels = "A") &
  theme(plot.tag = element_text(size = 30, face = "bold"))

ggsave(filename = paste(quote(precursorRT_and_mzMapDensity), ".png", sep=""),
       path = "plots",
       plot = precursorRT_and_mzMapDensity,
       width = 24, height = 20,
       units = "in", dpi = 300)

cat("\n\nGraph ",quote(precursorRT_and_mzMapDensity),".png were created.\n", sep="")
```

# Graph: Peptides | Proteins ----
```{r}


diannReportByRun <- dplyr::group_by(DiannReport(labels),Run, condition) %>% 
  dplyr::summarise(n_peptides = n_distinct(Stripped.Sequence),
                   n_proteins = n_distinct(Protein.Ids))


#TODO: get the proteins_plot, it's probably a good idea to create a generic function for both plots

# Counting the number of peptides per sample
peptides_plot <- diannReportByRun %>% 
    ggplot(aes(y = Run, x = n_peptides, fill = condition)) +
  
    geom_bar(stat = "identity",
             position = "dodge",
             show.legend = FALSE) +
  
  scale_fill_manual(values = colors) +
  
  geom_text(aes(label = n_peptides,
                hjust = ifelse(n_peptides > 8117, 1.1, -0.15)),
            color = "black",
            size = 7, nudge_x = -0.5) +
  
    labs(y = NULL,
        x = "Number of peptides",
        fill = NULL) +
  
    theme(text = element_text(size = 25),
      axis.text.x = element_text(
        angle = 90, vjust = 0.5, hjust = 1),
      panel.border = element_rect(color = "black", fill = NA),
      panel.background = element_blank()
      )

cat("\n\nTotal number of unique  peptides:",
    n_distinct(diannReport$Stripped.Sequence),
    
    "\nTotal number of unique proteins:",
    n_distinct(diannReport$Protein.Ids,"\n"))

```

