---
title: "Run_Analysis"
format: html
---

# Source everything :D
```{r}
# Load all functions
source("./src/Source_Everything.R")
```


# Install Packages
```{r}
# List of needed packages
packages <- c(
  "diann",           # to extract the MaxLFQ matrix from DIANN report
  "arrow",           # to read the report.parquet file
  "here",            # to avoid the need for use the path while loading the data
  "tidyverse",       # to do the data wrangling, plots, etc...
  "janitor",         # to clean the column names
  "ggpointdensity",  # to reconstruct the m/z density map
  "naniar",          # for sparsity analysis
  "factoextra",      # to plot the PCA
  "patchwork",       # to combine plots
  "lsa",             # to calculate the cosine similarity
  "ggvenn",          # to plot the Venn diagram
  "paletteer",       # to use the nice color palette
  "ggtext",          # to provide Markdown and HTML formatting in ggplot2
  "ggrepel",         # to avoid the overlapping of the labels in the plots
  "kableExtra",      # to format the tables
  "limma",           # to calculate the differential abundance
  "DIAgui"           # (no comment provided)
)

Install_Packages(packages)
```


# Load samples names and relations
```{r}

#TODO: the samples and prettyNames could be a dataframe with RUN, SampleName, PrettyName
samples <- c(
  HeLa_4mz_A_mixA = "MixA_REP_1",
  HeLa_4mz_B_mixA = "MixA_REP_2",
  HeLa_4mz_C_mixA = "MixA_REP_3",
  
  HeLa_4mz_A_mixB = "MixB_REP_1",
  HeLa_4mz_B_mixB = "MixB_REP_2",
  HeLa_4mz_C_mixB = "MixB_REP_3"  
)



prettyNames <- c(
  
  "MixA_REP_1" = "Mix A r1",
  "MixA_REP_2" = "Mix A r2",
  "MixA_REP_3" = "Mix A r3",
  
  "MixB_REP_1" = "Mix B r1",
  "MixB_REP_2" = "Mix B r2",
  "MixB_REP_3" = "Mix B r3"
)


samplesToCompare = list(
  MixA_vs_MixB = "MixA - MixB"
)


colors <- c(
  "#e31a1c","#1f78b4")

clusterColor <- c(
  "#1f78b4","#33a02c","#e31a1c","#ff7f00","#6a3d9a")


genesToHighLight_BlandAltman <- c(
  "Il1rap", "Lcn2", "Slc47a1", "Chia", "Mup17", "Mup3","Umod", "Mup20",
  "Xpnpep2",  "Nectin4", "Esam", "Alb","Asah1", "Smpd1", "Smpdl3a", "Apoe",
  "Apoa1", "Apoa2","B2m", "Vcam1", "Blvrb", "Orm2", "Orm1", "Mup4", "Obp1a",
  "Serpina6", "C8g", "Ngp", "Cd36", "Hba", "Hbb-b1","Hbb-b2","Chil3", "Apcs",
  "Hp", "Mug1", "Serpina1b","Serpina3k", "Bcam", "Cdh1", "Cdh11", "Ceacam1",
  "Cd248","Cfi", "Fgg", "Fga", "Fgb", "Kng1", "Lum", "Retnla","Cd200",
  "Cd44","Cd48", "Cd36", "Cltrn", "Cp", "Cspg4","Cst3", "Ctsd", "Ctse",
  "Ctso","Dag1", "Dsc1")


genesToCompare <- c("Il1rap", "Lcn2", "Mup17", "Mup3","Umod", "Mup20")

```


```{r}
Check_SampleName(samples)

diannReport <- Generate_DiannReport(samples)
diannMatrix <- Generate_DiannMatrix(diannReport, header = "Genes")

completeMatrix <- FilterMissingness(diannMatrix, threshold = 0) # 9137
completeMatrix <- log2(completeMatrix + 1)

# Delete_TempFiles()

```


# Precursor x RT
```{r}
precursorRT <- Generate_Graph_PrecursorRT(diannReport, prettyNames, colors)

ggplot2::ggsave(
  filename = paste0("Precursor_x_RT", ".png"),
  path = "./data/output/",
  plot = precursorRT,
  width = 12, height = 5,
  units = "in", dpi = 300
)

rm(precursorRT)
```


# Ion Cloud
```{r}
ionCloud <- Generate_IonCloud(diannReport, prettyNames)

ggplot2::ggsave(
  filename = paste0("ionCloud", ".png"),
  path = "./data/output/",
  plot = ionCloud,
  width = 12, height = 5,
  units = "in", dpi = 300
)

rm(ionCloud)
```


# Number of Peptides
```{r}
nPeptides <- Generate_Graph_NumberOfPeptides(diannReport, prettyNames, colors)

ggplot2::ggsave(
  filename = paste0("number_peptides", ".png"),
  path = "./data/output/",
  plot = nPeptides,
  width = 4, height = 3,
  units = "in", dpi = 300
)

rm(nPeptides)
```


# Number of Proteins
```{r}
nProteins <- Generate_Graph_NumberOfProteins(diannReport, prettyNames, colors)

ggplot2::ggsave(
  filename = paste0("number_proteins", ".png"),
  path = "./data/output/",
  plot = nProteins,
  width = 4, height = 3,
  units = "in", dpi = 300
)

rm(nProteins)
```


# Sparsity Matrix
```{r}


sparsityMatrix <- Generate_SparsityMatrix(diannMatrix, prettyNames)

ggplot2::ggsave(
  filename = paste0("sparsityMatrix_15", ".png"),
  path = "./data/output/",
  plot = sparsityMatrix,
  width = 4, height = 5,
  units = "in", dpi = 300
)

rm(sparsityMatrix)
```



# Midas imputation
```{r}
# start <- Sys.time()
# 
# imp_MIDAS <- Create_ImputarionMatrix_MICE(
#   simulated,
#   methodValue = "midastouch",
#   mValue = 5,
#   maxitValue = 100,
#   override = TRUE
# )
# 
# end <- Sys.time()
# timeout <- rbind(timeout, c("MIDAS", as.character.Date(start), as.character.Date(end), difftime(end, start, units = "mins")))
# 
# saveRDS(imp_MIDAS, "imp_MIDAS.rds")
```


# Data Imputation
```{r}
# 
# # Delete_TempFiles()
# 
# 
# # diannReport <- Generate_DiannReport(samples)
# # diannMatrix <- Generate_DiannMatrix(diannReport, header = "Genes")
# # 
# # # nrow(diannMatrix) # 9137
# # 
# # complete <- FilterMissingness(diannMatrix, threshold = 0)
# # 
# # # nrow(complete) # 7983 (sparsity = 0)
# # 
# # # remove 15% of the proteins
# # 
# x <- mice::ampute(completeMatrix, prop = 0.15, bycases = FALSE)
# 
# x <- completeMatrix
# 
# for (i in 1:nrow(completeMatrix)) {
#   for (j in 1:ncol(completeMatrix)) {
#     if (sample(1:10, 1) < 4) {
#       x[i,j] <- NA
#     }
#   }
# }

# simulated <- x

# saveRDS(simulated, "simulated_data.rds")
# # # view(simulated$amp)
# # 
# # simulated <- readRDS("simulated_data.rds")$amp
# # 
# timeout <- data.frame()
# 
# 
# start <- Sys.time()
# imp_Mean <- Create_ImputarionMatrix_MICE(
#   simulated,
#   methodValue = "mean",
#   mValue = 5,
#   maxitValue = 100,
#   override = TRUE
# )
# 
# end <- Sys.time()
# timeout <- rbind(timeout, c("Mean", as.character.Date(start), as.character.Date(end), difftime(end, start, units = "mins")))
# 
# saveRDS(imp_Mean, "imp_Mean.rds")
# 
# 
# # ------
# start <- Sys.time()
# 
# imp_RF <- Create_ImputarionMatrix_MICE(
#   simulated,
#   methodValue = "rf",
#   mValue = 5,
#   maxitValue = 100,
#   override = TRUE
# )
# 
# end <- Sys.time()
# timeout <- rbind(timeout, c("RF", as.character.Date(start), as.character.Date(end), difftime(end, start, units = "mins")))
# 
# saveRDS(imp_RF, "imp_RF.rds")
# 
# 
# # ------
# start <- Sys.time()
# 
# imp_PMM <- Create_ImputarionMatrix_MICE(
#   simulated,
#   methodValue = "pmm",
#   mValue = 5,
#   maxitValue = 100,
#   override = TRUE
# )
# 
# end <- Sys.time()
# timeout <- rbind(timeout, c("PMM", as.character.Date(start), as.character.Date(end), difftime(end, start, units = "mins")))
# 
# saveRDS(imp_PMM, "imp_PMM.rds")
# 
# # ------
# start <- Sys.time()
# 
# imp_NORM <- Create_ImputarionMatrix_MICE(
#   simulated,
#   methodValue = "norm",
#   mValue = 5,
#   maxitValue = 100,
#   override = TRUE
# )
# 
# end <- Sys.time()
# timeout <- rbind(timeout, c("norm", as.character.Date(start), as.character.Date(end), difftime(end, start, units = "mins")))
# 
# saveRDS(imp_NORM, "imp_NORM.rds")
# 
# 
# # ------
# start <- Sys.time()
# 
# imp_LASSO_NORM <- Create_ImputarionMatrix_MICE(
#   simulated,
#   methodValue = "lasso.norm",
#   mValue = 5,
#   maxitValue = 100,
#   override = TRUE
# )
# 
# 
# end <- Sys.time()
# timeout <- rbind(timeout, c("LASSO_NORM", as.character.Date(start), as.character.Date(end), difftime(end, start, units = "mins")))
# 
# saveRDS(imp_LASSO_NORM, "imp_LASSO_NORM.rds")
# 
# # ------
# start <- Sys.time()
# 
# imp_LASSO_SELECT <- Create_ImputarionMatrix_MICE(
#   simulated,
#   methodValue = "lasso.select.norm",
#   mValue = 5,
#   maxitValue = 100,
#   override = TRUE
# )
# 
# 
# end <- Sys.time()
# timeout <- rbind(timeout, c("LASSO_SELECT", as.character.Date(start), as.character.Date(end), difftime(end, start, units = "mins")))
# 
# saveRDS(imp_LASSO_SELECT, "imp_LASSO_SELECT.rds")
# 
# 
# # ------
# start <- Sys.time()
# 
# imp_StepWise <- Create_ImputationMatrix_StepWise(
#   simulated,
#   override = TRUE
# )
# 
# as.character.Date(start)
# 
# end <- Sys.time()
# timeout <- rbind(timeout, c("StepWise", as.character.Date(start), as.character.Date(end), difftime(end, start, units = "mins")))
# 
# saveRDS(imp_StepWise, "imp_StepWise.rds")
# 
# saveRDS(timeout, "timeout.rds")

```

# Read Imputated Data with amputation of 15%
```{r}
# timeout <- readRDS("./data/output/imputed/timeout.rds")

amputed_15 <- readRDS("./data/output/imputed/simulated_data.rds")$amp # 7983

imp_Mean <- readRDS("./data/output/imputed/imp_Mean.rds")
nrow(imp_Mean) # 7983

imp_RF <- readRDS("./data/output/imputed/imp_RF.rds")
nrow(imp_RF) # 7983

imp_PMM <- readRDS("./data/output/imputed/imp_PMM.rds")
nrow(imp_PMM) # 7983

imp_NORM <- readRDS("./data/output/imputed/imp_NORM.rds")
nrow(imp_NORM) # 7983

imp_LASSO_NORM <- readRDS("./data/output/imputed/imp_LASSO_NORM.rds")
nrow(imp_LASSO_NORM) # 7983

imp_LASSO_SELECT <- readRDS("./data/output/imputed/imp_LASSO_SELECT.rds")
nrow(imp_LASSO_SELECT) # 7983

imp_StepWise <- readRDS("./data/output/imputed/imp_StepWise.rds")
nrow(imp_StepWise) # 7983
```


# Compare two matrices
```{r}

# Compares which sample between matrices and produces the cosine of similarity
# test <- proxy::dist(completeMatrix, imp_Mean)
# tibble::view(test)
# 
# cos <- coop::cosine(completeMatrix, imp_Mean)
# tibble::view(cos)



# list_methods <- list(imp_Mean,
#                      imp_RF,
#                      imp_PMM,
#                      imp_NORM,
#                      imp_LASSO_NORM,
#                      imp_LASSO_SELECT,
#                      imp_StepWise)

# View(imp_StepWise)

cat("\n Mean: ",Metrics::rmse(completeMatrix, imp_Mean)) 
 # Mean:  0.9463299

cat("\n Norm: ",Metrics::rmse(completeMatrix, imp_NORM))
 # Norm:  0.2318168

cat("\n Lasso Norm: ",Metrics::rmse(completeMatrix, imp_LASSO_NORM))
 # Lasso Norm:  0.2316613

cat("\n Lasso Norm Select: ",Metrics::rmse(completeMatrix, imp_LASSO_SELECT))
 # Lasso Norm Select:  0.2296615

cat("\n PMM: ",Metrics::rmse(completeMatrix, imp_PMM))
 # PMM:  0.2258373

cat("\n RF: ",Metrics::rmse(completeMatrix, imp_RF)) 
 # RF:  0.2211848



cat("\n StepWise: ",Metrics::rmse(completeMatrix, imp_StepWise))
 # StepWise:  0.04483677






DF_RMSE <- data.frame(Method = names(list_methods),
                    RMSE = NA_real_)

DF_RMSE[DF_RMSE$Method == quote(imp_PMM), "RMSE"] <- Metrics::rmse(
  completeMatrix, imp_PMM)



```





# Cosine Similarity
```{r}
cosineSimilarity_StepWise <- Generate_Graph_CosineSimilarity(
  imputedMatrix_StepWise,
  samples,
  prettyNames
)

cosineSimilarity_MICE_RF <- Generate_Graph_CosineSimilarity(
  imputedMatrix_MICE_RF,
  samples,
  prettyNames
)

cosineSimilarity_MICE_PMM <- Generate_Graph_CosineSimilarity(
  imputedMatrix_MICE_PMM,
  samples,
  prettyNames
)

combinePlots <- patchwork::wrap_plots(cosineSimilarity_StepWise, cosineSimilarity_MICE_RF,cosineSimilarity_MICE_PMM,  ncol = 3) +
  patchwork::plot_annotation(tag_levels = "A") &
  ggplot2::theme(plot.tag = ggplot2::element_text(size = 30, face = "bold"))


ggplot2::ggsave(
  filename = paste0("combinePlots", ".png"),
  path = "./data/output/",
  plot = combinePlots,
  width = 40, height = 12,
  units = "in", dpi = 300
)

rm(cosineSimilarity_StepWise, cosineSimilarity_MICE_RF, cosineSimilarity_MICE_PMM)
```


# PCA and K-Means
```{r}
kMeansPCA <- Generate_Graph_PCA_and_Kmeans(
  imputedMatrix,
  numberOfClusters = 5,
  clusterColors = clusterColor,
  labels = prettyNames
)

ggplot2::ggsave(
  filename = paste0("kMeans_PCA", ".png"),
  path = "./data/output/",
  plot = kMeansPCA,
  width = 24, height = 10,
  units = "in", dpi = 300
)

rm(kMeansPCA)
```


# Coefficient of Variation
```{r}
CVs <- Generate_Graph_Coef_Variation(
  imputedMatrix,
  conditions = unique(diannReport$condition),
  labelsName = prettyNames,
  colorList = colors
)


ggplot2::ggsave(
  filename = paste0("Coef_Variation", ".png"),
  path = "./data/output/",
  plot = CVs,
  width = 10, height = 10,
  units = "in", dpi = 300
)

rm(CVs)
```


# Limma
```{r}
limmaContrasts <- Create_ContrastFitQuantUMS(imputedMatrix, samplesToCompare)

limmaResult <- CompareLimmaResults(limmaContrasts, samplesToCompare)

# #Save limma result in a .tsv file
write.table(
  limmaResult,
  file = "./data/output/allLimmaResultsCombined.tsv",
  quote = FALSE,
  sep = '\t',
  col.names = NA
)


number_significantProteins <- Count_SignificantProteins(limmaResult)

#Save limma result in a .tsv file
write.table(
  number_significantProteins,
  file = "./data/output/number_significantProteins.tsv",
  quote = FALSE,
  sep = '\t',
  col.names = NA
)

rm(limmaContrasts, number_significantProteins)
```


# Bland-Altman
```{r}
blandAltmanPlot <- Generate_Graph_BlandAltman(
  limmaResult, 
  genesToHighLight_BlandAltman
)

ggplot2::ggsave(
  paste0("Bland_Altman", ".png"),
  path = "./data/output/",
  plot = blandAltmanPlot,
  width = 25, height = 12,
  units = "in", dpi = 300,
  bg = "white"
)


rm(blandAltmanPlot)
```


# Compare Proteins Abundance
```{r}
proteinComparisonPlot <- Compare_ProteinsAbundance(
  imputedMatrix,
  genes = genesToCompare,
  colorList = colors,
  labels = prettyNames,
  n_columns = 10)


ggplot2::ggsave(
  paste0("Proteins_Comparison", ".png"),
  path = "./data/output/",
  plot = proteinComparisonPlot,
  width = 25, height = 8,
  units = "in", dpi = 300,
  bg = "white"
)

rm(proteinComparisonPlot)
```

