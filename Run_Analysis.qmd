---
title: "Run_Analysis"
format: html
---

# Source everything :D
```{r}
# Load all functions
source("./src/Source_Everything.R")
```


# Install Packages
```{r}
# List of needed packages
packages <- c(
  "diann",           # to extract the MaxLFQ matrix from DIANN report
  "arrow",           # to read the report.parquet file
  "here",            # to avoid the need for use the path while loading the data
  "tidyverse",       # to do the data wrangling, plots, etc...
  "janitor",         # to clean the column names
  "ggpointdensity",  # to reconstruct the m/z density map
  "naniar",          # for sparsity analysis
  "factoextra",      # to plot the PCA
  "patchwork",       # to combine plots
  "lsa",             # to calculate the cosine similarity
  "ggvenn",          # to plot the Venn diagram
  "paletteer",       # to use the nice color palette
  "ggtext",          # to provide Markdown and HTML formatting in ggplot2
  "ggrepel",         # to avoid the overlapping of the labels in the plots
  "kableExtra",      # to format the tables
  "limma",           # to calculate the differential abundance
  "DIAgui"           # (no comment provided)
)

Install_Packages(packages)
```


# Load samples names and relations
```{r}

#TODO: the samples and prettyNames could be a dataframe with RUN, SampleName, PrettyName
samples <- c(
  HeLa_4mz_A_mixA = "MixA_REP_1",
  HeLa_4mz_B_mixA = "MixA_REP_2",
  HeLa_4mz_C_mixA = "MixA_REP_3",
  
  HeLa_4mz_A_mixB = "MixB_REP_1",
  HeLa_4mz_B_mixB = "MixB_REP_2",
  HeLa_4mz_C_mixB = "MixB_REP_3"  
)



prettyNames <- c(
  
  "MixA_REP_1" = "Mix A r1",
  "MixA_REP_2" = "Mix A r2",
  "MixA_REP_3" = "Mix A r3",
  
  "MixB_REP_1" = "Mix B r1",
  "MixB_REP_2" = "Mix B r2",
  "MixB_REP_3" = "Mix B r3"
)


samplesToCompare = list(
  MixA_vs_MixB = "MixA - MixB"
)


colors <- c(
  "#e31a1c","#1f78b4")

clusterColor <- c(
  "#1f78b4","#33a02c","#e31a1c","#ff7f00","#6a3d9a")


genesToHighLight_BlandAltman <- c("FTR1","BET2","RRP40","YVH1","MSS116")


genesToCompare <- c("FTR1","BET2","RRP40","YVH1","MSS116","KRE5
","MAM3","TRS31","DFR1","UBA4","YBL055C","XKS1","ATP14",
"VPS5","AMDHD1","PBP4","RNF41","PEP8","MHP1","RSC6
","APL4","CTR1","SPT8","SLC8B1","CKS1")


```


```{r}
Check_SampleName(samples)

diannReport <- Generate_DiannReport(samples)
diannMatrix <- Generate_DiannMatrix(diannReport, header = "Genes")

completeMatrix <- FilterMissingness(diannMatrix, threshold = 0) # 9137

# Delete_TempFiles()

```


# Precursor x RT
```{r}
precursorRT <- Generate_Graph_PrecursorRT(diannReport, prettyNames, colors)

ggplot2::ggsave(
  filename = paste0("Precursor_x_RT", ".png"),
  path = "./data/output/",
  plot = precursorRT,
  width = 12, height = 5,
  units = "in", dpi = 300
)

rm(precursorRT)
```


# Ion Cloud
```{r}
ionCloud <- Generate_IonCloud(diannReport, prettyNames)

ggplot2::ggsave(
  filename = paste0("ionCloud", ".png"),
  path = "./data/output/",
  plot = ionCloud,
  width = 12, height = 5,
  units = "in", dpi = 300
)

rm(ionCloud)
```


# Number of Peptides
```{r}
nPeptides <- Generate_Graph_NumberOfPeptides(diannReport, prettyNames, colors)

ggplot2::ggsave(
  filename = paste0("number_peptides", ".png"),
  path = "./data/output/",
  plot = nPeptides,
  width = 4, height = 3,
  units = "in", dpi = 300
)

rm(nPeptides)
```


# Number of Proteins
```{r}
nProteins <- Generate_Graph_NumberOfProteins(diannReport, prettyNames, colors)

ggplot2::ggsave(
  filename = paste0("number_proteins", ".png"),
  path = "./data/output/",
  plot = nProteins,
  width = 4, height = 3,
  units = "in", dpi = 300
)

rm(nProteins)
```


# Sparsity Matrix
```{r}


sparsityMatrix <- Generate_SparsityMatrix(diannMatrix, prettyNames)

ggplot2::ggsave(
  filename = paste0("sparsityMatrix", ".png"),
  path = "./data/output/",
  plot = sparsityMatrix,
  width = 4, height = 5,
  units = "in", dpi = 300
)

rm(sparsityMatrix)
```




# Data Imputation
```{r}
imputedMatrix <- Create_ImputarionMatrix_MICE(
  diannMatrix,
  methodValue = "mean",
  mValue = 1,
  maxitValue = 3,
  override = TRUE
)
```


# Cosine Similarity
```{r}
cosineSimilarity <- Generate_Graph_CosineSimilarity(
  imputedMatrix,
  samples,
  prettyNames
)

ggplot2::ggsave(
  filename = paste0("cosine_Similarity", ".png"),
  path = "./data/output/",
  plot = cosineSimilarity,
  width = 20, height = 12,
  units = "in", dpi = 300
)

rm(cosineSimilarity)
```


# PCA and K-Means
```{r}
kMeansPCA <- Generate_Graph_PCA_and_Kmeans(
  imputedMatrix,
  numberOfClusters = 1,
  clusterColors = clusterColor,
  labels = prettyNames
)

ggplot2::ggsave(
  filename = paste0("kMeans_PCA", ".png"),
  path = "./data/output/",
  plot = kMeansPCA,
  width = 24, height = 10,
  units = "in", dpi = 300
)

rm(kMeansPCA)
```


# Coefficient of Variation
```{r}
CVs <- Generate_Graph_Coef_Variation(
  imputedMatrix,
  conditions = unique(diannReport$condition),
  labelsName = prettyNames,
  colorList = colors
)


ggplot2::ggsave(
  filename = paste0("Coef_Variation", ".png"),
  path = "./data/output/",
  plot = CVs,
  width = 10, height = 10,
  units = "in", dpi = 300
)

rm(CVs)
```


# Limma
```{r}
limmaContrasts <- Create_ContrastFitQuantUMS(imputedMatrix, samplesToCompare)

limmaResult <- CompareLimmaResults(limmaContrasts, samplesToCompare)

# #Save limma result in a .tsv file
write.table(
  limmaResult,
  file = "./data/output/allLimmaResultsCombined.tsv",
  quote = FALSE,
  sep = '\t',
  col.names = NA
)


number_significantProteins <- Count_SignificantProteins(limmaResult)

#Save limma result in a .tsv file
write.table(
  number_significantProteins,
  file = "./data/output/number_significantProteins.tsv",
  quote = FALSE,
  sep = '\t',
  col.names = NA
)

rm(limmaContrasts, number_significantProteins)
```


# Bland-Altman
```{r}
blandAltmanPlot <- Generate_Graph_BlandAltman(
  limmaResult, 
  genesToHighLight_BlandAltman
)

ggplot2::ggsave(
  paste0("Bland_Altman", ".png"),
  path = "./data/output/",
  plot = blandAltmanPlot,
  width = 25, height = 12,
  units = "in", dpi = 300,
  bg = "white"
)


rm(blandAltmanPlot)
```


# Compare Proteins Abundance
```{r}
proteinComparisonPlot <- Compare_ProteinsAbundance(
  imputedMatrix,
  genes = genesToCompare,
  colorList = colors,
  labels = prettyNames,
  n_columns = 10)


ggplot2::ggsave(
  paste0("Proteins_Comparison", ".png"),
  path = "./data/output/",
  plot = proteinComparisonPlot,
  width = 25, height = 8,
  units = "in", dpi = 300,
  bg = "white"
)

rm(proteinComparisonPlot)
```

